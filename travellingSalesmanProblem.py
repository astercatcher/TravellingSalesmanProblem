# -*- coding: utf-8 -*-
#!/usr/bin/env python3
"""TravellingSalesmanProblem.ipynb

Automatically generated by Colaboratory.
"""

import numpy as np
import random
import time
import matplotlib.pyplot as plt


#Greedy set
def TSP_Greedy(recent,notVisited,distance):
    notVisited.remove(recent)
    # print(recent,"->", end=' ')

    if len(notVisited) == 1:
      cost = []
      l = notVisited.pop()
      # print(l)
      cost.append(distance[recent][l])
      return cost
      
    else:
      dis = distance[recent][:]
      while True:
        i = np.argmin(dis) #min index
        if i in notVisited:
          cost = TSP_Greedy(i,notVisited,distance) + distance[recent][i]
          return cost
        else:
          dis[i] = 31

#Dynamic Programming set
def TSP_DP(recent,notVisit,distance):
  notVisited = notVisit.copy()
  notVisited.remove(recent)

  if len(notVisited) == 1:
    cost = []
    cost.append(distance[recent][notVisited.pop()])
    return cost

  else:
    cost = []
    for i in notVisited:
      cost.append(min(TSP_DP(i,notVisited,distance)) + distance[recent][i])

    if len(notVisited) == len(distance)-1:
      return min(cost)

    else:
      return cost

def randomGraph(n):
  graph = np.zeros([n,n])
  for i in range(n):
    for j in range(n):
      if i != j and graph[i][j] == 0:
        graph[i][j] = random.randint(1, 30)
        graph[j][i] = graph[i][j]
  return graph

if __name__ == "__main__":

  averageTimeGreedy = []
  averageTimeDP = []
  errorSum = []

  for i in range(4,20):
    print('頂點數：',i)
    runTimeGreedy = []
    runTimeDP = []
    gWeight = 0
    dpWeight = 0
    for times in range(5):
      notVisitedCities = set([k for k in range(i)])
      startPoint = random.randint(0, i-1)
      graph = randomGraph(i)

      start = time.perf_counter()
      dw = TSP_DP(startPoint,notVisitedCities,graph)
      end = time.perf_counter()
      runTimeDP.append(end-start)
      dpWeight += dw
      print("DP Weight:",dw)

      start = time.perf_counter()
      gw = TSP_Greedy(startPoint,notVisitedCities,graph)
      end = time.perf_counter()
      runTimeGreedy.append(end-start)
      gWeight += gw[0]
      print("Greedy Weight:",gw[0])

    print()
    averageTimeGreedy.append(np.mean(runTimeGreedy))
    averageTimeDP.append(np.mean(runTimeDP))
    errorSum.append((gWeight-dpWeight)/dpWeight)

  plt.plot(np.arange(4,11),averageTimeGreedy)
  plt.plot(np.arange(4,11),averageTimeDP)
  plt.title('Average Run Time')
  plt.xlabel('Point Number')
  plt.ylabel('Seconds')
  plt.show()

  plt.plot(np.arange(4,11),errorSum)
  plt.title('Average Error')
  plt.xlabel('Point Number')
  plt.ylabel('Averge Error')
  plt.show()
